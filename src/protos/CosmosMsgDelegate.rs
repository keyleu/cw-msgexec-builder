// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CosmosMsgDelegate.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:MsgDelegate)
pub struct MsgDelegate {
    // message fields
    // @@protoc_insertion_point(field:MsgDelegate.delegator_address)
    pub delegator_address: ::std::string::String,
    // @@protoc_insertion_point(field:MsgDelegate.validator_address)
    pub validator_address: ::std::string::String,
    // @@protoc_insertion_point(field:MsgDelegate.amount)
    pub amount: ::protobuf::MessageField<super::coin::Coin>,
    // special fields
    // @@protoc_insertion_point(special_field:MsgDelegate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MsgDelegate {
    fn default() -> &'a MsgDelegate {
        <MsgDelegate as ::protobuf::Message>::default_instance()
    }
}

impl MsgDelegate {
    pub fn new() -> MsgDelegate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "delegator_address",
            |m: &MsgDelegate| { &m.delegator_address },
            |m: &mut MsgDelegate| { &mut m.delegator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &MsgDelegate| { &m.validator_address },
            |m: &mut MsgDelegate| { &mut m.validator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::coin::Coin>(
            "amount",
            |m: &MsgDelegate| { &m.amount },
            |m: &mut MsgDelegate| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MsgDelegate>(
            "MsgDelegate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MsgDelegate {
    const NAME: &'static str = "MsgDelegate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.delegator_address = is.read_string()?;
                },
                18 => {
                    self.validator_address = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.amount)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        if let Some(v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        if let Some(v) = self.amount.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MsgDelegate {
        MsgDelegate::new()
    }

    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_address.clear();
        self.amount.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MsgDelegate {
        static instance: MsgDelegate = MsgDelegate {
            delegator_address: ::std::string::String::new(),
            validator_address: ::std::string::String::new(),
            amount: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MsgDelegate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MsgDelegate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MsgDelegate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDelegate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17CosmosMsgDelegate.proto\x1a\ncoin.proto\"\x9a\x01\n\x0bMsgDelegate\
    \x12+\n\x11delegator_address\x18\x01\x20\x01(\tR\x10delegatorAddress\x12\
    +\n\x11validator_address\x18\x02\x20\x01(\tR\x10validatorAddress\x121\n\
    \x06amount\x18\x03\x20\x01(\x0b2\x19.cosmos.base.v1beta1.CoinR\x06amount\
    J\xda\x01\n\x06\x12\x04\0\0\t\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\
    \x02\x03\0\x12\x03\x01\0\x14\n\n\n\x02\x04\0\x12\x04\x03\0\t\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x03\x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\
    \x02\x1f\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x02\x08\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\x05\t\x1a\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\
    \x1d\x1e\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x02\x1f\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\x06\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x06\t\x1a\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x1d\x1e\n\x0b\n\x04\
    \x04\0\x02\x02\x12\x03\x07\x02&\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\
    \x07\x02\x1a\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x07\x1b!\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x07$%b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::coin::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MsgDelegate::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
